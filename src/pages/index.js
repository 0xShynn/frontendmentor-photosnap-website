import { Box, Flex, SimpleGrid, Stack } from '@chakra-ui/layout'
import Head from 'next/head'
import PropTypes from 'prop-types'

import Feature from '../components/Feature'
import Hero from '../components/Hero'
import Layout from '../components/Layout'
import Story from '../components/Story'
import { getHomePage } from '../graphql/queries/getHomePage'

export const getStaticProps = async () => {
  const { page } = await getHomePage()

  return {
    props: {
      page,
    },
  }
}

export default function Home({ page }) {
  const heroes = page?.heroes ?? []
  const stories = page?.stories ?? []
  const features = page?.features ?? []

  return (
    <Layout
      data={{
        header: page.header,
        footer: page.footer,
      }}
    >
      <Head>
        <title>Next Chakra UI Starter</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex direction="column">
        {heroes.length > 0 ? (
          <Box bg="gray.300" maxW="1920px" mx="auto" w="full">
            {heroes.map((hero, index) => (
              <Hero
                key={index}
                image={hero.image}
                themeColor={hero.theme}
                title={hero.title}
                subtitle={hero.subtitle}
                link={hero.link}
                contentSide={hero.contentSide}
                noGradient={index !== 0 ? true : false}
              />
            ))}
          </Box>
        ) : null}

        {stories.length > 0 ? (
          <SimpleGrid minChildWidth="300px" spacing="0">
            {stories.map((story) => {
              const storySlug = `/stories/${story.slug}`
              return (
                <Story
                  key={story.id}
                  slug={storySlug}
                  photo={story.photo}
                  date={story.date}
                  title={story.title}
                  author={story.author.name}
                />
              )
            })}
          </SimpleGrid>
        ) : null}

        {features.length > 0 ? (
          <Stack
            bg="white"
            justify="center"
            align="center"
            textAlign="center"
            direction={{ base: 'column', lg: 'row' }}
            py={{ base: 24, xl: 28 }}
            px="12"
            spacing="12"
          >
            {features.map((feature) => (
              <Feature
                title={feature.title}
                subtitle={feature.subtitle}
                icon={feature.icon}
                key={feature.id}
              />
            ))}
          </Stack>
        ) : null}
      </Flex>
    </Layout>
  )
}

Home.propTypes = {
  page: PropTypes.shape({
    footer: PropTypes.object.isRequired,
    header: PropTypes.object.isRequired,
    heroes: PropTypes.arrayOf(PropTypes.object),
    stories: PropTypes.arrayOf(PropTypes.object),
    features: PropTypes.arrayOf(PropTypes.object),
  }),
}
